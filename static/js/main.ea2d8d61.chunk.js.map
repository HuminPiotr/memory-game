{"version":3,"sources":["theme/GlobalStyle.js","reducers/index.js","store/redux.js","views/StartView/StartView.jsx","components/CardList/Card.jsx","actions/index.js","components/CardList/CardList.jsx","components/PlayerName/PlayerName.jsx","components/Timer/Timer.jsx","components/TotalFlips/TotalFlips.jsx","assets/images/alien.svg","assets/images/dog.svg","assets/images/monkey.svg","assets/images/panda.svg","assets/images/pig.svg","assets/images/wolf.svg","components/Game/Game.jsx","utils/shuffleArray.js","views/GameView/GameView.jsx","utils/convertTime.js","store/ScoreRepository.js","store/ScoreStorage.js","components/ScoreList/ListItem.jsx","components/ScoreList/ScoreList.jsx","views/EndView/EndView.jsx","views/Root/Root.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","initialState","pairsFound","totalFlips","timeGame","isFrozen","playerName","undefined","firstCardId","secondCardId","gameComplete","cards","scoreList","rootReducer","state","action","type","payload","map","card","id","visibility","cardPair","filter","picture","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","StyledWrapper","styled","div","StartView","localStorage","setItem","className","htmlFor","name","maxLength","onChange","e","target","value","to","CardWrapper","connect","dispatch","flipUpFirstCard","flipUpSecondCard","checkPair","flipDownCards","frozenGame","defrostGame","onClick","isFirstCard","setTimeout","src","alt","cardList","Timer","props","saveTime","time","timerOn","interval","this","setInterval","setState","clearInterval","Math","floor","slice","Component","GameWrapper","startGame","cardsObject","completeGame","getItem","pictureList","alien","dog","monkey","panda","wolf","pig","useEffect","createCards","length","sort","random","GameView","convertTime","ScoreRepository","storage","get","numberListItems","score","push","item","isActual","a","b","pop","set","ScoreStorage","key","JSON","stringify","data","parse","StyledListItem","li","ListItem","player","StyledScoreList","ul","flips","repository","actualScore","uniqid","refresh","add","getAll","find","Table","endGame","Root","exact","path","component","EndView","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea2d8d61.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *, *::before, *::after{\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    html{ //happy rems\r\n        font-size: 62.5%;\r\n    }\r\n\r\n    body{\r\n        font-size: 1.6rem;\r\n        font-family: 'Trebuchet MS', sans-serif\r\n    }\r\n\r\n    @media(max-width: 600px){\r\n        html{\r\n            font-size: 55%;\r\n        }\r\n    }\r\n`\r\n\r\nexport default GlobalStyle;","const initialState = {\r\n    pairsFound: 0,\r\n    totalFlips: -1,\r\n    timeGame: 0,\r\n    isFrozen: false,\r\n    playerName: undefined,\r\n    firstCardId: undefined,\r\n    secondCardId: undefined,\r\n    gameComplete: false,\r\n    cards: [],\r\n    scoreList: [],\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    const {cards, firstCardId, secondCardId, pairsFound } = state;\r\n\r\n    switch(action.type) {\r\n        case('START_GAME'):\r\n            return {\r\n                playerName: action.payload.playerName || 'Anonim',\r\n                cards: action.payload.cards,\r\n                timeGame: 0,\r\n                pairsFound: 0,\r\n                totalFlips: 0,\r\n                firstCardId: undefined,\r\n                secondCardId: undefined,\r\n                gameComplete: false,\r\n            }\r\n\r\n        case (`FLIP_UP_FIRST_CARD`):\r\n            return{\r\n                ...state,\r\n                totalFlips: state.totalFlips += 1,\r\n                cards: cards.map(card => {\r\n                    if(card.id == action.payload.id) {\r\n                        card.visibility = 'open';\r\n                    }    \r\n                    return card;\r\n                }),\r\n                firstCardId: action.payload.id,\r\n            }\r\n\r\n        case (`FLIP_UP_SECOND_CARD`):\r\n            return{\r\n                ...state,\r\n                totalFlips: state.totalFlips += 1,\r\n                cards: cards.map(card => {\r\n                    if(card.id === action.payload.id){\r\n                        card.visibility = 'open';\r\n                    }\r\n                    return card;\r\n                }),\r\n                secondCardId: action.payload.id,  \r\n            }\r\n     \r\n        case('CHECK_PAIR'):\r\n                const cardPair = cards.filter( (card) => card.id === firstCardId || card.id === secondCardId);\r\n\r\n                if(cardPair[0].picture === cardPair[1].picture){\r\n                    return{\r\n                        ...state,\r\n                        pairsFound: pairsFound + 1,\r\n                        cards: cards.map( card => {\r\n                            if(card.id === cardPair[0].id || card.id === cardPair[1].id){\r\n                                card.visibility = 'found';\r\n                            }\r\n                            return card;\r\n                        })\r\n                    }\r\n                }\r\n            \r\n        case(`FROZEN_GAME`):\r\n            return {\r\n                ...state,\r\n                isFrozen: true,\r\n            }\r\n\r\n        case(`DEFROST_GAME`):\r\n            return {\r\n                ...state,\r\n                isFrozen: false,\r\n            }\r\n\r\n\r\n        case('FLIP_DOWN_CARDS'):\r\n            return {\r\n                ...state,\r\n                cards: cards.map( card => {\r\n                    if(card.visibility === 'open'){\r\n                        card.visibility = 'hidden'\r\n                    }\r\n                    return card;\r\n                })\r\n            }\r\n        \r\n        case('SAVE_TIME'):\r\n            return{\r\n                ...state,\r\n                timeGame: action.payload.timeGame,\r\n            }\r\n\r\n        case('COMPLETE_GAME'):\r\n            return{\r\n                ...state,\r\n                gameComplete: true,\r\n            }\r\n        \r\n        case('END_GAME'):\r\n            return{\r\n                ...state,\r\n                gameComplete: false,\r\n                pairsFound: 0,\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer, /* preloadedState, */\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst StyledWrapper = styled.div`\r\n    height: calc(100vh - 100px);\r\n    padding: 50px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    @media(max-width: 600px){\r\n        padding: 0;\r\n    }\r\n\r\n    h1 {\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n        font-size: 6rem;\r\n        letter-spacing: 10px;\r\n        margin: 0;\r\n        margin-bottom: 100px;\r\n    }\r\n\r\n    .inputWrapper {\r\n        text-align: center;\r\n    }\r\n\r\n    label {\r\n        display: inline-block;\r\n        text-transform: uppercase;\r\n        font-size: 14px;\r\n    }\r\n\r\n    input {\r\n        height: 50px;\r\n        font-size: 16px;\r\n    }\r\n\r\n    .button {\r\n        margin-top: 25px;\r\n        padding: 10px 25px;\r\n        border: solid 1px blue;\r\n        color: blue;\r\n        text-decoration: none;\r\n    }\r\n`\r\n\r\nconst StartView = () => {\r\n    localStorage.setItem('PLAYER_NAME', 'Anonim');\r\n    \r\n    const handleChange = (e) => {\r\n        localStorage.setItem('PLAYER_NAME', e.target.value);\r\n    }\r\n\r\n    return(\r\n    <>\r\n    <StyledWrapper>\r\n        <h1>Memory</h1>\r\n        <div className=\"inputWrapper\">\r\n            <label htmlFor=\"name\">Player name</label> <br></br>\r\n            <input type=\"text\"  name=\"name\" id=\"name\" maxLength = '20' onChange={handleChange}/>\r\n        </div>\r\n        <Link to=\"/game\" className=\"button\" >Play</Link>\r\n    </StyledWrapper>\r\n    </>\r\n)\r\n}\r\n\r\nexport default StartView;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { flipDownCards, flipUpFirstCard, flipUpSecondCard, checkPair, frozenGame, defrostGame } from '../../actions';\r\n\r\n// style \r\nconst CardWrapper = styled.div`\r\n  min-width: 100px;\r\n  width: 100%;\r\n  flex-basis: 20%;\r\n  min-height: 100px;\r\n  max-height: 150px;\r\n  margin: 10px;\r\n  perspective: 1000px;\r\n  position: relative;\r\n  cursor: pointer;\r\n\r\n  @media(max-width: 600px){\r\n    margin: 5px;\r\n  }\r\n\r\n  .card__content{\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    transition: 0.6s;\r\n    transform: translateX(0%) rotateY(0deg);\r\n    transform-style: preserve-3d;\r\n    transform-origin: 100% 50%;\r\n\r\n    &.open{\r\n      transform: translateX(-100%) rotateY(180deg);\r\n    }\r\n    &.hidden{\r\n      transform: translateX(0%) rotateY(0deg);\r\n    }\r\n    &.found{\r\n      background: grey;\r\n      opacity: 0;\r\n      cursor: default;\r\n    }\r\n\r\n  }\r\n\r\n  .face {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n    font-size: 60px;\r\n    backface-visibility: hidden;\r\n  }\r\n\r\n  .front {\r\n    background: #cbc0d3;\r\n    border: solid 5px #8e9aaf;\r\n  }\r\n\r\n  .back {\r\n    background: #dee2ff;\r\n    transform: rotateY(180deg);\r\n    border: solid 5px #8e9aaf;\r\n  }\r\n\r\n  .picture {\r\n    height: 100%;\r\n    width: 100%;\r\n    padding: 5px;\r\n    text-align: center;\r\n  }\r\n\r\n`\r\n\r\nconst Card = (\r\n  { id, picture, visibility, \r\n    totalFlips, isFrozen, \r\n    flipUpFirstCard, \r\n    flipUpSecondCard, \r\n    checkPair,\r\n    frozenGame, \r\n    defrostGame, \r\n    flipDownCards }) => {\r\n\r\n    const clickCard = () => {\r\n      const isFirstCard = totalFlips % 2 === 0;\r\n\r\n      const TIME_OF_VISIBILITY_CARD = 700;\r\n      const TIME_OF_FROZEN = 600;\r\n\r\n      if(visibility === 'hidden'){\r\n        if(isFirstCard && !isFrozen){\r\n          flipUpFirstCard(id);\r\n        }\r\n\r\n        else if(!isFirstCard && !isFrozen){\r\n          flipUpSecondCard(id);\r\n          frozenGame();\r\n          setTimeout(() => {\r\n            checkPair()            \r\n            setTimeout(() => {\r\n              flipDownCards();\r\n              defrostGame();\r\n            }, TIME_OF_FROZEN);\r\n\r\n          },TIME_OF_VISIBILITY_CARD)\r\n\r\n        }\r\n    }    \r\n    }\r\n\r\n      return (\r\n        <>\r\n          <CardWrapper onClick={clickCard}>\r\n            <div className={`card__content ${visibility}`}  >\r\n              <div className=\"face front\"></div>\r\n              <div className=\"face back \">\r\n                <img src={picture} alt=\"image\" className=\"picture\"/>\r\n              </div>\r\n            </div>\r\n          </CardWrapper>\r\n        </>\r\n      );\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { totalFlips,  isFrozen } = state;\r\n    return { totalFlips, isFrozen };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  flipUpFirstCard: (id) => dispatch(flipUpFirstCard(id)),\r\n  flipUpSecondCard: (id) => dispatch(flipUpSecondCard(id)),\r\n  checkPair: () => dispatch(checkPair()),\r\n  flipDownCards: () => dispatch(flipDownCards()),\r\n  frozenGame: () => dispatch(frozenGame()),\r\n  defrostGame: () => dispatch(defrostGame()),\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps, \r\n  mapDispatchToProps\r\n  )(Card);\r\n","export const startGame = (playerName, cards) => {\r\n    return {\r\n        type: `START_GAME`,\r\n        payload: {\r\n            playerName,\r\n            cards\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const flipUpFirstCard = id => {\r\n    return {\r\n        type: `FLIP_UP_FIRST_CARD`,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport const flipUpSecondCard = id => {\r\n    return {\r\n        type: `FLIP_UP_SECOND_CARD`,\r\n        payload: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport const checkPair = () => {\r\n    return {\r\n        type: `CHECK_PAIR`,\r\n    }\r\n}\r\n\r\nexport const frozenGame = () => {\r\n    return {\r\n        type: `FROZEN_GAME`,\r\n    }\r\n}\r\n\r\nexport const defrostGame = () => {\r\n    return {\r\n        type: `DEFROST_GAME`,\r\n    }\r\n}\r\n\r\nexport const flipDownCards = () => {\r\n    return {\r\n        type: `FLIP_DOWN_CARDS`,\r\n    }\r\n}\r\n\r\nexport const saveTime = (timeGame) => {\r\n    return {\r\n        type: `SAVE_TIME`,\r\n        payload: {\r\n            timeGame\r\n        }\r\n    }\r\n}\r\n\r\nexport const completeGame = () => {\r\n    return {\r\n        type: `COMPLETE_GAME`\r\n    }\r\n}\r\n\r\nexport const endGame = () => {\r\n    return {\r\n        type: `END_GAME`,\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cards }) => {\r\n\r\n    const cardList = cards.map( card => (\r\n        <Card \r\n            id={card.id} \r\n            picture={card.picture} \r\n            visibility={card.visibility} \r\n            key={card.id} \r\n        />) \r\n    ); \r\n\r\n    return (\r\n        <>\r\n            {cardList}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { cards } = state;\r\n    return { cards };\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst PlayerName = ({ playerName }) => <h2>{ playerName }</h2>\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    const { playerName } = state;\r\n    return { playerName };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n    )(PlayerName);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { saveTime } from '../../actions';\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.saveTime = props.saveTime;\r\n        this.state = { \r\n            time: 0,\r\n            timerOn: false\r\n         }\r\n         this.interval = null;\r\n        }\r\n        \r\n         componentDidMount() {\r\n             this.interval = setInterval(() => {\r\n                 this.setState( (state) => ({\r\n                     ...state,\r\n                     time: this.state.time + 10\r\n                 }))\r\n             },10)\r\n         }\r\n\r\n         componentWillUnmount() {\r\n           this.saveTime(this.state.time) \r\n            clearInterval(this.interval);\r\n         }\r\n\r\n\r\n    \r\n    render() { \r\n        return ( \r\n            <> \r\n            <div className=\"container\">\r\n                <p>\r\n                    <span>{(\"0\" + Math.floor((this.state.time / 60000) % 60)).slice(-2)}:</span>\r\n                    <span>{(\"0\" + Math.floor((this.state.time / 1000) % 60)).slice(-2)}:</span>\r\n                    <span>{(\"0\" + Math.floor((this.state.time / 10) % 100)).slice(-2)}</span>\r\n                </p>\r\n            </div>\r\n        </>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = \r\n    dispatch => ({\r\n    saveTime: timeGame => \r\n    dispatch(saveTime(timeGame)),\r\n})\r\n \r\nexport default connect(null,mapDispatchToProps)(Timer);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst TotalFlips = ({ totalFlips }) => <p>Flips: {totalFlips}</p>\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    const { totalFlips } = state;\r\n    return { totalFlips };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n    )(TotalFlips);\r\n","export default __webpack_public_path__ + \"static/media/alien.1f8261d7.svg\";","export default __webpack_public_path__ + \"static/media/dog.4df5ec30.svg\";","export default __webpack_public_path__ + \"static/media/monkey.e99edbe7.svg\";","export default __webpack_public_path__ + \"static/media/panda.3ff9f857.svg\";","export default __webpack_public_path__ + \"static/media/pig.4980aafc.svg\";","export default __webpack_public_path__ + \"static/media/wolf.e0a3ff60.svg\";","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport styled from 'styled-components';\r\n\r\nimport { completeGame, startGame } from '../../actions';\r\nimport { shuffleArray } from '../../utils/shuffleArray';\r\n\r\nimport CardList from '../CardList/CardList';\r\nimport PlayerName from '../PlayerName/PlayerName.jsx';\r\nimport Timer from '../Timer/Timer.jsx';\r\nimport TotalFlips from '../TotalFlips/TotalFlips.jsx';\r\n\r\n//images\r\nimport alien from '../../assets/images/alien.svg';\r\nimport dog from '../../assets/images/dog.svg';\r\nimport monkey from '../../assets/images/monkey.svg';\r\nimport panda from '../../assets/images/panda.svg';\r\nimport pig from '../../assets/images/pig.svg';\r\nimport wolf from '../../assets/images/wolf.svg';\r\n\r\nconst GameWrapper = styled.div`\r\n    margin: 25px;\r\n    display: flex;\r\n\r\n    @media(max-width: 600px){\r\n        margin: 0;\r\n        flex-direction: column-reverse;\r\n    }\r\n\r\n    .panel {\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 15%;\r\n        margin-top: 20px;\r\n        text-align: center;\r\n        @media(max-width: 600px){\r\n            flex-direction: row;\r\n            justify-content: space-around;\r\n            align-items: center;\r\n            width: 100%;\r\n            \r\n        }\r\n    }\r\n    .board {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        flex-wrap: wrap;\r\n        background: #053C5E;\r\n        max-width: 800px;\r\n        width: 100%;\r\n        min-height: 80vh;\r\n        margin: 0 auto;\r\n    }\r\n`\r\n\r\nconst Game = ({ startGame, pairsFound, gameComplete, completeGame}) => {\r\n         \r\n        const playerName = localStorage.getItem('PLAYER_NAME');\r\n        const pictureList = [\r\n            alien, alien, dog, dog, monkey, monkey, panda, panda, wolf, wolf, pig, pig\r\n        ]        //od liczby par zależeć będzie ile kart jest wygenerowanych\r\n\r\n            \r\n    useEffect( () => {\r\n        const cards = createCards();\r\n        startGame(playerName, cards);\r\n    },[])\r\n\r\n    useEffect( () => {\r\n        if(pairsFound >= pictureList.length / 2){\r\n            completeGame();\r\n        }\r\n\r\n    },[pairsFound])\r\n\r\n\r\n    const createCards = () => {\r\n        const shuffledPictureList = shuffleArray(pictureList);\r\n\r\n        const cardsObject = shuffledPictureList.map( (picture, id) => ({\r\n            id,\r\n            picture,\r\n            visibility: 'hidden',\r\n        }))\r\n\r\n        return cardsObject;\r\n    }\r\n\r\n        return (\r\n            <>\r\n            <GameWrapper>\r\n                <div className=\"panel\">\r\n                    <PlayerName />\r\n                    <Timer />\r\n                    <TotalFlips />\r\n                </div>\r\n                \r\n                <div className=\"board\">\r\n                    <CardList />\r\n                </div>\r\n            </GameWrapper>\r\n            {\r\n                gameComplete && <Redirect to=\"/end\" />\r\n            }\r\n            </>\r\n        )\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { pairsFound, gameComplete } = state;\r\n    return { pairsFound, gameComplete };\r\n}\r\n\r\nconst mapDispatchToProps = \r\n    dispatch => ({\r\n        startGame: (playerName, cardsObject) => \r\n        dispatch(startGame(playerName, cardsObject)),\r\n        completeGame: () => dispatch(completeGame()),\r\n    })\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n    )(Game);","export const shuffleArray = (array) => {\r\n    return array.sort(function() { return 0.5 - Math.random() });\r\n}","import React from 'react';\r\n\r\nimport Game from '../../components/Game/Game.jsx';\r\n\r\nconst GameView = () => (\r\n    <>\r\n        <Game />  \r\n    </>\r\n)\r\n\r\nexport default GameView","\r\n\r\nexport const convertTime = (time) => (\r\n    <span>\r\n        <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\r\n        <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\r\n        <span>{(\"0\" + Math.floor((time / 10) % 100)).slice(-2)}</span>\r\n    </span>    \r\n)\r\n\r\n","class ScoreRepository {\r\n    constructor(storage) {\r\n        this.scoreList = storage.get('SCORE_LIST') || [];\r\n        this.storage = storage;\r\n        this.numberListItems = 5;\r\n    };\r\n\r\n    add(score){\r\n        this.scoreList.push(score);\r\n        this.onChange();\r\n    };\r\n\r\n    refresh(){\r\n        this.scoreList = this.scoreList.map( (item) => {\r\n            item.isActual = false;\r\n            return item;\r\n        })\r\n    };\r\n\r\n    getAll(){\r\n        return this.scoreList;\r\n    }\r\n\r\n    onChange(){\r\n        this.scoreList.sort( (a,b) => a.time - b.time);\r\n        if(this.scoreList.length > this.numberListItems){\r\n            this.scoreList.pop();\r\n        }\r\n        this.storage.set('SCORE_LIST', this.scoreList);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ScoreRepository;","class ScoreStorage {\r\n    constructor(){\r\n        this.storage = localStorage;\r\n    }\r\n\r\n    set(key, value){\r\n        this.storage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    get(key){\r\n        const data = this.storage.getItem(key)\r\n        return JSON.parse(data);\r\n    }\r\n}\r\n\r\nexport default ScoreStorage;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { convertTime } from '../../utils/convertTime';\r\n\r\n// style\r\nconst StyledListItem = styled.li`\r\n    padding-left: 25px;\r\n    margin-bottom: 10px;\r\n    font-weight: ${({ isActual }) => (isActual ? 'bold' : 100)};\r\n\r\n\r\n`\r\n\r\nconst ListItem = ({ player, time, isActual }) => (\r\n    <StyledListItem isActual={isActual}>\r\n            { player } &nbsp;\r\n            <span className={\"listItem__time\"}>{ convertTime(time) }</span>\r\n    </StyledListItem>\r\n)\r\n\r\nexport default ListItem;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { convertTime } from '../../utils/convertTime';\r\nimport uniqid from 'uniqid'\r\n\r\n\r\nimport ScoreRepository from '../../store/ScoreRepository'\r\nimport ScoreStorage from '../../store/ScoreStorage';\r\nimport ListItem from './ListItem.jsx';\r\n\r\n\r\n//style\r\nconst StyledScoreList = styled.ul`\r\n    list-style-type: decimal;\r\n    text-align: left;\r\n    text-align: center;\r\n    display: inline-block;\r\n\r\n    .scoreList__actualScore {\r\n     padding-left: 25px;\r\n     font-weight: bold;\r\n}\r\n`\r\n\r\n\r\n\r\nconst ScoreList = ({ playerName, timeGame, totalFlips }) => {\r\n\r\n    const createScoreRecord = (player, time, flips) => {\r\n        return (\r\n            {\r\n                id: uniqid(),\r\n                player,\r\n                time,\r\n                flips,\r\n                isActual: true,\r\n            }\r\n        )\r\n    }\r\n\r\n    const storage = new ScoreStorage();\r\n    const repository = new ScoreRepository(storage);\r\n    let scoreList = [];\r\n    \r\n    \r\n\r\n    const actualScore = createScoreRecord(playerName, timeGame, totalFlips);\r\n\r\n\r\n        if (actualScore.time) {\r\n            repository.refresh();\r\n            repository.add(actualScore);\r\n\r\n            scoreList = repository.getAll();\r\n\r\n            scoreList = scoreList.map((item) => (\r\n                <ListItem\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    player={item.player}\r\n                    time={item.time}\r\n                    isActual={item.isActual}\r\n                />))\r\n\r\n        }\r\n        \r\n\r\n        \r\n\r\n\r\n    return (\r\n        <>\r\n                <StyledScoreList>\r\n                    {scoreList}\r\n                    \r\n                        { !scoreList.find(item => item.key === actualScore.id  ) &&   \r\n                            <li>\r\n                                <p className=\"scoreList__actualScore\">\r\n                                    <span>{playerName}</span> &nbsp;\r\n                                    <span>{convertTime(actualScore.time)}</span>\r\n                                </p>\r\n                            </li>\r\n                        }\r\n\r\n                    \r\n                </StyledScoreList>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { playerName, timeGame, totalFlips } = state;\r\n    return { playerName, timeGame, totalFlips };\r\n}\r\n\r\nexport default connect(mapStateToProps)(ScoreList);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { endGame } from '../../actions';\r\n\r\n\r\nimport ScoreList from '../../components/ScoreList/ScoreList.jsx';\r\n\r\n\r\nconst Table = styled.div`\r\n    width: 100%;\r\n    max-width: 600px;\r\n    min-height: 50%;\r\n    margin: auto;\r\n    border: solid teal 2px;\r\n`\r\n\r\nconst StyledWrapper = styled.div`\r\n    display: flex;\r\n    margin: 25px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n\r\n    .button {\r\n        margin-top: 25px;\r\n        padding: 10px 25px;\r\n        border: solid 1px blue;\r\n        color: blue;\r\n        text-decoration: none;\r\n    }\r\n`\r\n\r\nconst EndView = ({ endGame }) => (\r\n    <>\r\n        <StyledWrapper>\r\n            <h1>Best of the best</h1>\r\n            <Table>\r\n                <ScoreList />\r\n            </Table>\r\n            <Link to=\"/\" className=\"button\" onClick={endGame}> New game </Link>\r\n        </StyledWrapper>\r\n    </>\r\n)\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    endGame: () => dispatch(endGame()),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(EndView);","import { BrowserRouter, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport GlobalStyle from '../../theme/GlobalStyle';\nimport store from '../../store/redux';\nimport StartView from '../StartView/StartView.jsx';\nimport GameView from '../GameView/GameView.jsx';\nimport EndView from '../EndView/EndView.jsx';\n\nconst Root = () => {\n  return (\n    <Provider store={store}>\n    <BrowserRouter>\n    <>\n        <GlobalStyle />\n        <Route exact path='/' component={StartView}/>\n        <Route path='/game' component={GameView} />\n        <Route path='/end' component={EndView} />\n    </>\n    </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './views/Root/Root.jsx';\n\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}